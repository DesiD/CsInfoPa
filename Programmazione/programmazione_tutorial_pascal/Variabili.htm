<!-- saved from url=(0022)http://internet.e-mail -->
<!DOCTYPE HTML PUBLIC ="-//IETF//DTD HTML 4.0//EN"> <HTML>
<HEAD>
   <META NAME="KEYWORDS" CONTENT="variabili,delphi">
   <META NAME="DESCRIPTION" CONTENT="Variabili del delphi">
   <META NAME="GENERATOR" CONTENT="Microsoft FrontPage 5.0">
   <META NAME="AUTHOR" CONTENT="Silian">
   <TITLE>Variabili del delphi</TITLE>
</HEAD>
<BODY BGColor="white" LINK="blue" ALINK="red" VLINK="purple" BACKGROUND="" TEXT="black">

<P><H2>Variabili del Delphi 6</H2>
<FONT FACE="Arial" SIZE="3" COLOR="Black">
In questo breve tutorial imparerete, in parte, a dichiarare ed a riconoscere i vari tipi di variabili del delphi.
<BR>
<BR><H4>Introduzione al pascal:</H4>
<BR>Prima di iniziare dobbiamo spiegare dei punti fondamentali:
<UL>
<LI>In pascal i commenti si possono fare o così: {}, oppure così: (**).Il testo inserito tra { e } o tra (* e *) è un commento e serve ai programmatori (o a chi legge il codice) a capire cosa svolge il programma. Il testo "commentato" viene ignorato dal compilatore e non interferisce con il programma.
<LI>Gli esempi che ho creato possono contenere piccoli errori di visualizzazione. Comunque chiunque trovasse errori di codice (non di scrittura) può 
<A HREF="mailto:dr.silian@libero.it"> segnalarmeli.</A>
<LI>Ci possono essere differenze sostanziali tra i vari codici (Turbo pascal,pascal for windows,Delphi).
<LI>Gli operatori numerici sono i seguenti: < minore, > maggiore, = uguale, <> diverso.
<LI>Per la maggiore leggibilità del codice si dovrebbero utilizzare degli spazi, che però l'HTML ignora (Vedi leggibilità).
</UL>
Leggibilità:
<BR>Tenendo conto che - è uno spazio (Solo in questo esempio):
<BR>program esempio;
<BR>uses wincrt;
<BR>Var a,b,c:integer;
<BR>Begin
<BR>-----write('Inserisci a: ');
<BR>-----readln(a);
<BR>-----writeln;
<BR>-----write('Inserisci b: ');
<BR>-----readln(b);
<BR>-----if a=1 then
<BR>----------Begin
<BR>---------------c:=a+b;
<BR>---------------write(c);
<BR>----------end
<BR>-----else c:=a*2;
<BR>end.
<BR>Negli esempi che troverete il codice non è formattato con trattini (-) per mia comodità ed anche per vostra. Infatti per provare un esempio non dovrete fare altro che selezionare il codice e incollarlo nel vostro editor.
<BR>
<BR>Per iniziare segue lo schema di un semplice programma in pascal:
<BR>program {nome del programma, consigliato non più di 8 caratteri per il pascal e solo minuscole per la compatibilità con linux};
<BR>uses {librerie solo per il turbo pascal ed il pascal per windows; il delphi provvede a tutto da solo};
<BR>var {dichiarazione delle variabili};
<BR>const {dichiarazione delle costanti; non tratteremo questo argomento};
<BR>Begin 
<BR>{comando di pulizia dello schermo solo per dos};
<BR>{variabile1}:={variabile2}; 
<BR>writeln;
<BR>write('{testo}',{variabile o operazione tra valori});
<BR>readln({nome variabile di input});
<BR>{comando di attesa};
<BR>end{mettiamo il punto se l'applicazione finisce, il punto e virgola se finisce una procedura}
<BR>
<BR>Punti da chiarire:
<UL> 
<LI>; : il punto e virgola serve per chiudere una riga di comando. Non va utilizzato dopo il begin, dopo il then del blocco di istruzioni if-then-else e in altri casi (Vedi guida Pascal o delphi).
<LI>uses ...; : serve per inizializzare una libreria.Usiamo uses crt per il turbo pascal, uses wincrt per il pascal for windows.Il delphi non richiede l'uso esplicito di librerie in applicazioni standard.
<LI>Per pulire lo schermo in turbo pascal per dos utilizziamo il comando clrscr; .
<LI>{variabile1}:={variabile2}; : usiamo il comando := per assegnare il valore della variabile b alla variabile a.
<LI>{comando di attesa}; : il comando di attesa serve per aspettare la pressione del tasto invio da parte dell'utente che fa terminare in quel momento l'applicazione.Nel turbo pascal il comando è readln; . Il turbo pascal per windows ed il delphi hanno questo comando già integrato.
</UL>
Vediamo un esempio pratico di una semplice applicazione in turbo pascal per windows:
<BR>program somma;
<BR>uses wincrt;
<BR>var val1,val2,risult:Integer;
<BR>Begin
<BR>write('Inserire il primo valore: ');
<BR>readln(val1);
<BR>writeln;
<BR>write('Inserire il secondo valore: ');
<BR>readln(val2);
<BR>writeln;
<BR>risult:=val1+val2;
<BR>write('La somma di ',val1,' e ',val2,' è ',risult);
<BR>end.
<BR>
<BR>Ed ora vediamo lo stesso programma con dei miglioramenti:
<BR>{1}program somma2;
<BR>{2}uses wincrt;
<BR>{3}var 
<BR>{4}val1,val2:Real;
<BR>{5}continua:Char;
<BR>{6}Begin
<BR>{7}repeat
<BR>{8}write('Inserire il primo valore: ');
<BR>{9}readln(val1);
<BR>{10}writeln;
<BR>{11}write('Inserire il secondo valore: ');
<BR>{12}readln(val2);
<BR>{13}writeln;
<BR>{14}write('La somma di ',val1,' e ',val2,' è 'val1+val2:3:2);
<BR>{15}writeln;
<BR>{16}write('Vuoi continuare? S/N: ');
<BR>{17}readln(continua);
<BR>{18}until continua='N';
<BR>{19}DoneWinCrt;
<BR>{20}end.
<BR>
<BR>Cambiamenti significativi da chiarire:
<UL>
<LI>{4}Le variabili val1 e val2 non sono più integer, ma Real(Double), che accetta i numeri decimali e valori più grandi.
<LI>{5}Dichiarazione di una variabile (continua) Char.
<LI>{7}Inizia un ciclo repeat-until.
<LI>{14}Invece di assegnare il valore di val1+val2 ad una variabile i conti vengono direttamente svolti risparmiando una riga di codice.I :3:2 dopo il calcolo si devono inserire dopo una variabile real o un conto tra variabili real per non visualizzare un valore esponenziale. Il 3 stà per il numero di spazi dopo la virgola, il due per il numero di decimali.
<LI>{17}Legge il valore della variabile Char continua.
<LI>{18}Controlla il valore della variabile continua e ripete il ciclo (Ritorna al repeat e riesegue il codice) fino a quando il valore della variabile continua è uguale a N. Quando avviene questo esce dal ciclo e esegue il codice che viene dopo {*}.
<LI>{19}Il DoneWinCrt è il comando di chiusura rapida del pascal per windows che ignora il readln integrato e chiude subito l'applicazione.
</UL>
{*}: E' buona norma, quando si usa un ciclo come repeat-until e derivati, salvare spesso il lavoro, perchè se dovessimo sbagliare la condizione il ciclo potrebbe diventare infinito e costringerci a chiudere il programma perdendo tutto il lavoro svolto fino a quel punto.
<BR>
<BR>L'If-Then-Else:
<BR>Se-Allora-Altrimenti è la traduzione in Italiano di If-Then-Else; Questo utilissimo blocco di condizioni permette al programmatore di inserire una o più condizioni all'interno dell'applicazione che stà sviluppando. 
<BR>Lo schema principale è il seguente:
<BR>If {Condizione1} then {Istruzione1}
<BR>Else {Istruzione2};
<BR>Esempio:
<BR>program div1;
<BR>uses wincrt;
<BR>var a,b:real;
<BR>Begin
<BR>write('Inserire il primo valore ');
<BR>readln(a);
<BR>write('Inserire il secondo valore: ');
<BR>readln(b);
<BR>If b=0 then write('La divisione di 0 è impossibile')
<BR>Else write(a:3:3,'/',b:3:3,'='a/b:3:3);
<BR>end.
<BR>
<BR>In poche parole il compilatore controlla la prima condizione {a=0}, se è vera esegue il primo blocco di istruzioni {write('La divisione di 0 è impossibile')}, altrimenti esegue il secondo blocco di istruzioni {write(a:3:3,'/',b:3:3,'='a/b:3:3);}. E' inoltre molto importante non inserire il punto e virgola {;} dopo il then, ma solo dopo la fine del ciclo {Else;}.Questa regola vale anche per il ciclo repeat-until e per altri cicli {Dopo il repeat non và il punto e virgola}.
<BR>
<BR>Il blocco di condizioni If-Then-Else si può evolvere come segue:
<BR>If ({Condizione1}) {Operatore booleano} ({Condizione2}) {Operatore booleano} ({...}) then
<BR>Begin
<BR>{Blocco istruzioni1}
<BR>end
<BR>Else if ({Condizione3}) {Operatore booleano} ({Condizione4}) {Operatore booleano} ({...}) then
<BR>Begin
<BR>{Blocco istruzioni2}
<BR>end
<BR>else
<BR>Begin
<BR>{Blocco istruzioni3}
<BR>end;
<BR>
<BR>In questo blocco di condizioni ci sono 3 innovazioni principali:
<OL>
<LI>Utilizzo degli operatori booleani con più di una condizione.
<LI>Scrittura di più istruzioni all'interno di Begin ed end {end o end;}.
<LI>Utilizzo di altri if dopo quello iniziale {if then,else if then,else if then,...,else}.
</OL>
1.Operatori booleani:
<BR>Con gli operatori booleani possiamo mettere in relazione più variabili,numeri o condizioni all'interno di un espressione. I valori da mettere a confronto vanno messi tra parentesi tonde {(Valore1) operatore booleano (Valore2)}. Gli operatori booleani sono i seguenti:
<UL>
<LI>not: Operatore di negazione.
<LI>and: Operatore di congiunzione.
<LI>or: Operatore di disgiunzione.
<LI>xor: Operatore di disgiunzione esclusiva.
</UL>
2.Più istruzioni:
<BR>Quando dobbiamo scrivere più istruzioni dopo una condizione dobbiamo andare a capo e scrivere Begin, dopo il begin vanno le istruzioni ed infine va un end.Se il gruppo di istruzioni non era l'ultimo dobbiamo scrivere solo end {end}, altrimenti, se il gruppo di istruzioni era l'ultimo dobbiamo fare seguira a end un punto e virgola {end;}.
<BR>
<BR>3.Più condizioni
<BR>Se oltre all'if-then-else abbiamo bisogno di verificare più istruzioni possiamo utilizzare dopo la prima condizione introdotta da if, altre condizioni introdotte da else if {if (condizione1) then,else if (condizione2) then,else if (...) then,else}.
<BR>
<BR>Riassumendo l'esempio in turbo pascal per dos è:
<BR>program magg_min;
<BR>uses crt;
<BR>var a,b:Integer;
<BR>Begin
<BR>clrscr;
<BR>write('Inserire il primo numero: ');
<BR>readln(a);
<BR>writeln;
<BR>write('Inserire il secondo numero: ');
<BR>readln(b);
<BR>writeln;
<BR>If a = b then write('I due numeri sono uguali');
<BR>else if a > b then 
<BR>Begin
<BR>write('I due numeri non sono uguali');
<BR>writeln;
<BR>write(a,'>',b,' --> a > b');
<BR>end
<BR>else if a < b then
<BR>Begin
<BR>write('I due numeri non sono uguali');
<BR>writeln;
<BR>write(a,'<',b,' --> a < b');
<BR>end;
<BR>readln;
<BR>end.
<BR>
<BR><H4>Le variabili viste da vicino:</H4>
<BR>Una variabile si dichiara normalmente così:
<BR>Var {nome della variabile}:{tipo variabile};
<BR>Esempio:
<BR>Var a:Integer;
<BR>
<BR>Più variabili dello stesso tipo si dichiarano così:
<BR>Var {nome della 1°variabile},{nome della 2°variabile},{nome della 3°variabile},{...}:{tipo variabile};
<BR>Esempio:
<BR>Var a,b,risult:real;
<BR>
<BR>Più variabili di tipo diverso si dichiarano così:
<BR>Var
<BR>   {nome della 1°variabile},{nome della 2°variabile},{nome della 3°variabile}:{tipo variabile};
<BR>   {nome della 4°variabile},{nome della 5°variabile},{nome della 6°variabile}:{tipo variabile};
<BR>   {nome della 7°variabile},{nome della 8°variabile},{nome della 9°variabile}:{tipo variabile};
<BR>   {...}:{tipo variabile};
<BR>Esempio:
<BR>Var
<BR>   scelta1,inizialeN:Char;
<BR>   valore1,valore2,risultato1:Double;
<BR>   nome:String;
<BR>
<BR>La dichiarazione delle variabili deve avvenire all'interno di una procedura:
<BR>Esempio:
<BR>procedure TForm1.FormCreate(Sender: TObject);
<BR>var a,b:Byte;
<BR>Begin
<BR>	...
<BR>end;
<BR>
<BR>Le variabili possono anche essere dichiarate come Public o Private:
<BR>unit Unit1;
<BR>interface
<BR>uses
<BR>Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
<BR>Dialogs;
<BR>type
<BR>TForm1 = class(TForm)
<BR>procedure FormCreate(Sender: TObject);
<BR>private
<BR>{Dichiarazione variabili Private}
<BR>public
<BR>{Dichiarazione variabili Public}
<BR>end;
<BR>var
<BR>Form1: TForm1;
<BR>implementation
<BR>{$R *.dfm}
<BR>end.
<BR>
<BR>Per lavorare con più valori di tipo diverso dichiarateli Variant:
<BR>var {nome della 1°variabile},{nome della 2°variabile},{...}:Variant;
<BR>Esempio:
<BR>var codice_utente,nome_utente,Identificazione:Variant;
<BR>In questo modo potrete sommare le variabili come segue:
<BR>var codice_utente,nome_utente,identificazione:Variant;
<BR>Begin
<BR>codice_utente:=1324;
<BR>nome_utente:='Mario Rossi';
<BR>identificazione:=codice_utente+nome_utente;
<BR>La variabile Variant identificazione conterrà il valore '1324Mario Rossi'
<BR>
<BR>Per altre informazioni visitare il sito
<A HREF="http://utenti.lycos.it/marentaxstudio/">di Marentax.</A>
oppure consultare la sezione variabili della guida di delphi o pascal.
<BR>
<BR>
Queste sono le variabili più comuni del delphi (molte valgono anche per il pascal):
</P>
<TABLE bgcolor="white" align="left" width="100%" border="3">
   <TR><TH width="33,3%" >Tipo</TH> <TH width="33,3%" >Range</TH> <TH width="33,4%" >Format</TH> </TR>
   <TR><TD>Integer</TD> <TD>-2147483648..2147483647</TD> <TD>signed 32 bit,4 bytes</TD> </TR>
   <TR><TD>Cardinal</TD> <TD>0..4294967295</TD> <TD>unsigned 32-bit,4 bytes</TD> </TR>
   <TR><TD>Shortint</TD> <TD>-128..127</TD> <TD>signed 8-bit,1 byte</TD> </TR>
   <TR><TD>Smallint</TD> <TD>-32768..32767</TD> <TD>signed 16-bit</TD> </TR>
   <TR><TD>Longint</TD> <TD>-2147483648..2147483647</TD> <TD>signed 32-bit, 4 bytes</TD> </TR>
   <TR><TD>Int64</TD> <TD>-2^63..2^63-1</TD> <TD>signed 64-bit</TD> </TR>
   <TR><TD>Byte</TD> <TD>0..255</TD> <TD>unsigned 8-bit</TD> </TR>
   <TR><TD>Word</TD> <TD>0..65535</TD> <TD>unsigned 16-bit</TD> </TR>
   <TR><TD>Longword</TD> <TD>0..4294967295</TD> <TD>unsigned 32-bit</TD> </TR>
   <TR><TD>Char</TD> <TD>I primi 256 caratteri Unicode presi da soli.</TD> <TD>signed 8-bit / 16-bit</TD> </TR>
   <TR><TD>Boolean</TD> <TD>True,False.</TD> <TD>1 byte</TD> </TR>
   <TR><TD>ByteBool</TD> <TD>0,1.</TD> <TD>1 byte</TD> </TR>
   <TR><TD>WordBool</TD> <TD>Una parola.</TD> <TD>2 bytes</TD> </TR>
   <TR><TD>LongBool</TD> <TD>Due parole.</TD> <TD>4 bytes</TD> </TR>
   <TR><TD>Enumerated</TD> <TD>Da 5 a 15 identificatori.</TD> <TD>-</TD> </TR>
   <TR><TD>Subrange</TD> <TD>Valori integer da 1 a 500,valori char e valori WordBool. Tutti considerati in gruppo.</TD>    <TD>-</TD> </TR>
   <TR><TD>Real48</TD> <TD>2.9*10^-39..1.7*10^38 con precisione 11-12 cifre.</TD> <TD>6 bytes</TD> </TR>
   <TR><TD>Single</TD> <TD>1.5 x 10^-45 .. 3.4 x 10^38 con precisione 7-8 cifre.</TD> <TD>4 bytes</TD> </TR>
   <TR><TD>Double(Equivalente a Real)</TD> <TD>5.0 x 10^-324 .. 1.7 x 10^30 con precisione 15-16 cifre.</TD> <TD>8 bytes</TD>    </TR>
   <TR><TD>Extended</TD> <TD>3.6 x 10^-4951 .. 1.1 x 10^4932 con precisione 19-20 cifre.</TD> <TD>10 bytes</TD> </TR>
   <TR><TD>Comp</TD> <TD>-2^63+1 .. 2^63 -1 con precisione 19-20 cifre.</TD> <TD>8 bytes</TD> </TR>
   <TR><TD>Currency</TD> <TD>-922337203685477.5808.. 922337203685477.5807 con precisione 19-20 cifre.</TD> <TD>8 bytes</TD>      </TR>
   <TR><TD>ShortString</TD> <TD>255 caratteri,è compatibile nella maggior parte dei sistemi operativi.</TD> <TD>Da 2 a 256    bytes</TD>    </TR>
   <TR><TD>AnsiString(long string)</TD> <TD>~2^31 caratteri,si usano caratteri ANSI a 8-bit.</TD> <TD>Da 4 bytes a 2GB</TD>      </TR>
   <TR><TD>WideString</TD> <TD>~2^30 caratteri,caratteri Unicode e applicazioni per più server o più linguaggi.</TD> <TD>Da 4    bytes a 2GB</TD> </TR>
   <TR><TD>Static arrays</TD> <TD>Array di qualsiasi tipo di variabili con indice fisso.</TD> <TD>Max 2GB</TD> </TR>
   <TR><TD>Dynamic arrays</TD> <TD>Array di qualsiasi tipo di variabili con indice mobile.</TD> <TD>Nessun limite</TD> </TR>
   <TR><TD>Multidimensional dynamic arrays</TD> <TD>Si dichiara un array di un altro array dinamico.</TD> <TD>Nessun    limite</TD> </TR>
   <TR><TD>Records</TD> <TD>Valori integer di anni(Year),mesi(Month) e giorni(Day).</TD> <TD>Massimo del valore scelto</TD>    </TR>
   <TR><TD>File</TD> <TD>Qualsiasi file.</TD> <TD>Da 1 a 128 bytes</TD> </TR>
   <TR><TD>Variant</TD> <TD>Convertono e assumono le caratteristiche delle variabili integer, real, string e Boolean.</TD>       <TD>-</TD> </TR>
   <TR><TD>Variant arrays</TD> <TD>Qualsiasi valore integer, real, string e Boolean sotto forma di arrays.</TD> <TD>-</TD>    </TR>
   <TR><TD>Ole variant</TD> <TD>Qualsiasi file associato ad un programma viene integrato nell'applicazione creata.</TD>       <TD>Dimensione del file scelto</TD> </TR>
   <TR><TD>Threadvar</TD> <TD>Si usano per le applicazioni multithreaded e non possono essere usate in librerie       dinamiche.</TD> <TD>-</TD> </TR>
</FONT>

</BODY></HTML>









</xmp></noscript>

<!-- START RedMeasure V4 - Java v1.1  $Revision: 1.2 $-->
<!-- COPYRIGHT 2000 Red Sheriff Limited -->
<script language="JavaScript"><!--
var pCid="it_lycos-it_0";
var w0=1;
var refR=escape(document.referrer);
if (refR.length>=252) refR=refR.substring(0,252)+"...";
//--></script>
<script language="JavaScript1.1"><!--
var w0=0;
//--></script>
<script language="JavaScript1.1" src="http://server-it.imrworldwide.com/a1.js">
</script>
<script language="JavaScript"><!--
if(w0){
var imgN='<img src="http://server-it.imrworldwide.com/cgi-bin/count?ref='+ refR+'&cid='+pCid+'" width=1 height=1>';
if(navigator.userAgent.indexOf('Mac')!=-1){document.write(imgN);
}else {
 document.write('<applet code="Measure.class" '+
 'codebase="http://server-it.imrworldwide.com/"'+'width=1 height=2>'+
 '<param name="ref" value="'+refR+'">'+'<param name="cid" value="'+pCid+
 '"><textflow>'+imgN+'</textflow></applet>');
 }
}
document.write("<COMMENT>");
//-->
</script>
<noscript>
<img src="http://server-it.imrworldwide.com/cgi-bin/count?cid=it_lycos-it_0"
width=1 height=1></noscript>
</COMMENT>
<!-- END RedMeasure V4 -->

</noscript><script type="text/javascript" src="http://ads.tripod.lycos.it/ad/ad.php?cat=computer.software&mkw=&CC=it&ord=3dda7f6a&adpref="></script>


</pre></xmp></noscript>

<!-- START RedMeasure V4 - Java v1.1  $Revision: 1.3 $-->
<!-- COPYRIGHT 2000 Red Sheriff Limited -->
<script language="JavaScript"><!--
var pCid="it_lycos-it_0";
var w0=1;
var refR=escape(document.referrer);
if (refR.length>=252) refR=refR.substring(0,252)+"...";
//--></script>
<script language="JavaScript1.1"><!--
var w0=0;
//--></script>
<script language="JavaScript1.1" src="http://server-it.imrworldwide.com/a1.js">
</script>
<script language="JavaScript"><!--
if(w0){
var imgN='<img src="http://server-it.imrworldwide.com/cgi-bin/count?ref='+ refR+'&cid='+pCid+'" width=1 height=1>';
if(navigator.userAgent.indexOf('Mac')!=-1){document.write(imgN);
}else {
 document.write('<applet code="Measure.class" '+
 'codebase="http://server-it.imrworldwide.com/"'+'width=1 height=2>'+
 '<param name="ref" value="'+refR+'">'+'<param name="cid" value="'+pCid+
 '"><textflow>'+imgN+'</textflow></applet>');
 }
}
document.write("<COMMENT>");
//-->
</script>
<noscript>
<img src="http://server-it.imrworldwide.com/cgi-bin/count?cid=it_lycos-it_0"
width=1 height=1></noscript>
</COMMENT>
<!-- END RedMeasure V4 -->

<script language="javascript" src="http://ads.tripod.lycos.it/ad/test_frame_size.js"></script>
<script language="javascript">
if (!AD_clientWindowSize()) {
        document.write("<NOSC"+"RIPT>");
}
</script>

<script type="text/javascript" src="http://ads.tripod.lycos.it/ad/ad.php?cat=computer.software&mkw=&CC=it&ord=3e2a91b0&adpref="></script>